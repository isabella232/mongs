"""Spaghetti! Who likes spaghetti? It's mildly documented spaghetti, at least.

Okay, I moved a couple functions out of here to .aspen/mongs.py. So now maybe
more like ziti. Alright, angelhair. Can you give me angelhair?

"""
import datetime
import pprint
import urllib

import mongs
import pymongo
from aspen import json, Response
from bson.objectid import ObjectId, InvalidId

SIZE_THRESHOLD = 2048 # number of bytes above which we link out

class Pair:
    """Represent a single key/value pair from a document.
    """

    is_filtered = False
    is_indexed = False

    def __init__(self, base, _id, k, v):
        escape = True
        if isinstance(v, unicode):
            # lists and dictionaries work for some reason
            v = v.encode('ASCII', 'replace')
        if isinstance(v, ObjectId):
            v = '%s (%s)' % (v, v.generation_time)
        if isinstance(v, datetime.datetime):
            v = "%s (%s)" % (v.isoformat(), mongs.dt2age(v))
        if isinstance(v, (int, float)):
            v = "<code>%s</code>" % v
            escape = False
        nv = len(str(v))
        link = ''
        if k == '_id':
            link = "%s/%s/" % (base, _id)
        elif _id and nv > SIZE_THRESHOLD:
            v = "%d bytes" % nv
            link = "%s/%s/%s.json" % (base, _id, k)
        else:
            if not isinstance(v, basestring):
                v = pprint.pformat(v, indent=1)
            if escape:
                v = v.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            if '\n' in v:
                v = "<pre>%s</pre>" % v

        self.k = k
        self.v = v
        self.link = link


def NamespacePair(database):
    # Have I ever done this before? I don't think I have.

    class NamespacePair(Pair):
        """Represent the single pair of values for a system.namespaces entry.
        """
        def __init__(self, base, _id, k, v):
            parts = v.split('.$')
            if len(parts) == 1:
                parts += ['']
            namepart, indexpart = parts
            if indexpart:
                indexpart = ".$" + indexpart
            collection = namepart[len(database)+1:]
            value = '%s.<a href="../../../%s/">%s</a>%s'
            value %= (database, collection, collection, indexpart)

            self.k = k
            self.v = value
            self.link = False

    return NamespacePair


[----]

# Parse input
# ===========

server = path['server']
database = path['database']
collection = path['collection']
filter = path['filter']
page = path.get('page', None)
single = page is None
filtered = single


# Pair class.
# ===========
# If we are on system.namespaces we want to link to collections.

if collection == 'system.namespaces':
    Pair = NamespacePair(database)  # will insert hyperlinks to the collection


# Compute base, filter, and page.
# ===============================
# This simplate is symlinked to be called in two contexts:
#
# - when a document is specified by a page number into a number of documents
#    matched by a filter
# - when a single document is specified by its _id
#
# Base is used to compute links, filter is the query spec, and page is the
# 1-index into the query results.

optimize_count = False # If we can, compute the count without filtering.

if not single:      # /server/database/collection/filter/page/
    # Parse the filter as JSON, possibly base64-encoded.
    base = '../..'
    filter = urllib.unquote(filter).strip()
    if filter:
        filtered = True
        if not filter.startswith('{'):
            filter = filter.decode('base64')
        filter = json.loads(filter)
    else:
        filter = {}
    if not filter:
        # If there is no filter, we can safely compute the count from the
        # unfiltered collection, which appears to be O(1) instead of O(N).
        optimize_count = True

elif collection == 'system.namespaces':
                    # /server/database/system.namespaces/collection/

    # Special case for system.namespaces. The _id is actually the
    # fully-qualified name of a collection or index. Send them to the
    # collection!
    collection = filter.split('$')[0][len(database)+1:]
    raise Response(301, headers=[('Location', '../../%s/' % collection)])

else:               # /server/database/collection/_id/
    # Convert a request for a specific _id into a filter with one page.
    page = 1
    base = '..'
    _id = filter
    try:
        _id = ObjectId(_id)
    except InvalidId:
        pass
    filter = {"_id": _id}

if collection == 'system.namespaces':
    # special case for MongoDB's collection of collections; docs have no _id
    pass
else:
    if '_id' not in filter:
        # I'm sorry, I forget why I did this. :^(
        filter.update({'_id': {'$exists': True}})


# Sort.
# =====
# The user passes sort in as part of the {filter} hash, which otherwise is a
# MongoDB query spec. Pull sort out after the filter has been decoded but
# before we actually use it.

if 'sort' in filter:
    sort = filter.pop('sort')
elif collection == 'system.namespaces':
    # special case; this has no _id, only name
    sort = [("name", 1)]
else:
    sort = [("_id", 1)]


# Load documents.
# ===============
# pymongo.Connection advertises that it does connection pooling.

coll = pymongo.Connection(server, slave_okay=True)[database][collection]
documents = coll.find(filter)
ndocs = coll.count() if optimize_count else documents.count()
if (page < 1) or (page > ndocs):
    raise Response(404)
documents.rewind()


# Sort.
# =====

if collection == 'system.namespaces' and ndocs > 1024:

    # Special case. It is possible to index system.namespaces, but no one is
    # really going to have done that. Only sort if there's a small number of
    # collections.
    #
    # The next step would be to check for the presence of an index. I think
    # MongoDB actually does this internally (refuses to sort if the result set
    # is too large and there's no index), but I think it still degrades
    # performance.

    pass

else:
    documents.sort(sort)


# Compute prev/next.
# ==================

prev = None # or int
next = None # or int
if page > 1:
    prev = page - 1
if page < ndocs:
    next = page + 1


# Advance the cursor to the requested document.
# =============================================
# This appears to be O(N), which means it is fast for early pages and slow for
# late pages.

document = documents.skip(page - 1).next()


# Compute a set of indexed keys.
# ==============================

indices = coll.index_information()
indexed = set()
for v in indices.values():
    indexed.add(v['key'][0][0])


# Convert the document to a generator for the template.
# =====================================================

if document is not None: # XXX Can document ever be None?
    _id = document.get('_id', '')
    def generate_pairs(document):
        """Yield key/value pairs for document.
        """
        for k,v in sorted(document.iteritems()):
            pair = Pair(base, _id, k, v)
            pair.is_filtered = False
            pair.is_indexed = pair.k in indexed
            pair.sort = ''
            if pair.k != '_id':
                pair.is_filtered = pair.k in filter
                if pair.k == sort:
                    pair.sort = 'ascending' if direction > 0 else 'descending'
            yield pair
    pairs = generate_pairs(document)
    if single:
        # For documents that were specified by an explicit _id, we show
        # that _id above the rest of the key/values. Advancing the pairs
        # generator here means that we don't display _id again with the
        # rest of the key/values.
        pairs.next()

#============================================================================
# For some reason under Python2.6 but not 2.7 if the caret-L is on the same
# line as the commented ====== then we get a SyntaxError. Curious!
[----]
{% extends "base.html" %}
{% block content %}
<style>
    .note EM {
        font-style: normal;
        background: #FFFE98;
    }
</style>
<table>
    <tr class="big server">
        <th><a href="/" title="Click for All Servers">Server</a></th>
        <td>{{ server }}</td>
    </tr>
    <tr class="big database">
        <th><a href="/{{ server }}/" title="Click for All Databases">Database</a></th>
        <td>{{ database }}</td>
    </tr>
    <tr class="big collection">
        <th><a href="/{{ server }}/{{ database }}/" title="Click for All Collections">Collection</a></th>
        <td>{{ collection }}</td>
    </tr>
    <tr class="big document">
        <th>{% if filtered %}<span><a href="/{{ server }}/{{ database }}/{{ collection }}/"
                    title="Click for All Documents">Document</a>{% else %}<span>Document{% end %}
            <span class="note">highlight = <em>indexed</em></span>
        </th>
        <td>
            {% if single %}
            <a href="./">{{ _id }}</a>
            {% else %}
            {% if prev %}<a class="prev" href="../{{ prev }}/">prev</a>{% else %}prev{% end %} |
            {{ page }} of {{ mongs.commaize(ndocs, places=0) }}
            | {% if next %} <a href="../{{ next }}/">next</a>{% else %}next{% end %}
            {% end %}
        </td>
    </tr>
    {% for pair in pairs %}
    <tr class="attribute">
        <th><span><span class="inner {{ pair.sort }} {% if pair.is_indexed %}indexed{% end %} {% if pair.is_filtered %}filtered{% end %}">{{ pair.k }}</span></span></th>
        <td>{% if pair.link %}<a href="{{ pair.link }}">{{ pair.v }}</a>{% else %}{{ pair.v }}{% end %}</td>
    </tr>
    {% end %}
</table>
{% end %}
